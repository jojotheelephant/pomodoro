{"version":3,"sources":["Components/ProgressBar.js","Components/Award.js","Components/TimerBlock.js","Components/MainBody.js","Components/Footer.js","App.js","index.js"],"names":["ProgressBar","initialSec","secRemaining","pomodoroTimer","restSec","useState","height","borderRadius","width","progressionStyle","setProgressionStyle","useEffect","progression","percentProgress","proessionByPx","Math","floor","className","id","style","Award","completedCount","stars","setStars","getStars","tempStars","i","push","key","TimerBlock","playState","setPlayState","setPomodoroTimer","setSecRemaining","endMS","setEndMS","formatted","setFormatted","intervalId","setIntervalId","setCompletedCount","window","localStorage","getItem","grabCountFromLocalStorage","parseInt","formatTime","toggleTimer","setInterval","secondsRemaining","Date","getTime","clearInterval","setItem","min","sec","pomodoroSound","restSound","document","getElementById","play","then","catch","error","console","log","onClick","currentTimeMS","xmlns","fill","viewBox","d","src","type","MainBody","Footer","App","ReactDOM","render","StrictMode"],"mappings":"gXAmCeA,MAhCf,YAA4E,IAArDC,EAAoD,EAApDA,WAAYC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,QAAW,EACvBC,mBAAS,CACrDC,OAAQ,MACRC,aAAc,OACdC,MAAO,QAJ4D,mBAChEC,EADgE,KAC9CC,EAD8C,KAOvEC,qBAAU,WACNC,MAED,CAACV,IAEJ,IAAMU,EAAc,WAChB,IAAIC,EAEAA,EADAV,GACmBF,EAAaC,GAAgBD,GAE7BG,EAAUF,GAAgBE,EAEjD,IAAMU,EAAgBC,KAAKC,MAAwB,IAAlBH,EAAuB,GACxDH,EAAoB,CAAEF,MAAM,GAAD,OAAKM,EAAL,SAG/B,OACI,yBAAKG,UAAU,gBACX,yBAAKA,UAAU,OACX,yBAAKC,GAAG,cAAcC,MAAOV,O,MCA9BW,MA1Bf,YAAoC,IAAnBC,EAAkB,EAAlBA,eAAkB,EACLhB,mBAAS,IADJ,mBACxBiB,EADwB,KACjBC,EADiB,KAG/BZ,qBAAU,WACNa,MAED,CAACH,IAEJ,IAAMG,EAAW,WAEb,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAIL,EAAgBK,IAChCD,EAAUE,KAAK,uBAAGC,IAAKF,EAAGT,UAAU,2BAExCM,EAASE,IAGb,OACI,oCACI,yBAAKR,UAAU,UACX,uBAAGA,UAAU,4BACb,yBAAKA,UAAU,cAAcK,M,MCkK9BO,MApLf,WAAsB,MAEgBxB,oBAAS,GAFzB,mBAEXyB,EAFW,KAEAC,EAFA,OAIwB1B,oBAAS,GAJjC,mBAIXF,EAJW,KAII6B,EAJJ,OAMG3B,mBAAS,MAAvBJ,EANW,sBAQAI,mBAAS,KAApBD,EARW,sBAUsBC,mBAAS,GAV/B,mBAUXH,EAVW,KAUG+B,EAVH,OAYQ5B,mBAAS,GAZjB,mBAYX6B,EAZW,KAYJC,EAZI,OAcgB9B,mBAAS,IAdzB,mBAcX+B,EAdW,KAcAC,EAdA,OAgBkBhC,mBAAS,MAhB3B,mBAgBXiC,EAhBW,KAgBCC,EAhBD,OAkB0BlC,mBAAS,GAlBnC,mBAkBXgB,EAlBW,KAkBKmB,EAlBL,KAqBlB7B,qBAAU,WAEN,GADAsB,EAAgBhC,GACsC,OAAlDwC,OAAOC,aAAaC,QAAQ,kBAA4B,CACxD,IAAMC,EAA4BC,SAASJ,OAAOC,aAAaC,QAAQ,mBACvEH,EAAkBI,MAGvB,IAGHjC,qBAAU,WACNmC,IACAC,MAED,CAAC7C,IAGJS,qBAAU,WACN,GAAImB,EACA,IAAMZ,EAAKuB,OAAOO,aAAY,WAC1B,IAAMC,GAAoBf,GAAQ,IAAIgB,MAAOC,WAAa,IAC1DlB,EAAgBgB,GAChBV,EAAcrB,KACf,UACKY,GACRW,OAAOW,cAAcd,KAG1B,CAACR,IAGJnB,qBAAU,WACN8B,OAAOC,aAAaW,QAAQ,iBAAkBhC,KAC/C,CAACA,IAEJ,IAAMyB,EAAa,WACf,IAAIQ,EAAMT,SAAS3C,EAAe,GAAI,IAClCqD,EAAMV,SAAS3C,EAAe,GAAI,IACtCoD,EAAMA,EAAM,GAAN,WAAeA,GAAQA,EAC7BC,EAAMA,EAAM,GAAN,WAAeA,GAAQA,EAC7BlB,EAAa,GAAD,OAAIiB,EAAJ,YAAWC,KAoBrBR,EAAc,WACZ7C,EAAe,GAAKC,GACpBsC,OAAOW,cAAcd,GACrBE,EAAkBnB,EAAiB,GACnCU,GAAa,GACbC,GAAiB,GACjBC,EAAgB7B,GAChBoD,KACOtD,EAAe,IAAMC,IAC5BsC,OAAOW,cAAcd,GACrBP,GAAa,GACbC,GAAiB,GACjBC,EAAgBhC,GAChBwD,MAKFD,EAAgB,WAClBE,SACKC,eAAe,kBACfC,OACAC,OACAC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAIhCN,EAAY,WACdC,SACKC,eAAe,cACfC,OACAC,OACAC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAGtC,OACI,oCACI,yBAAK9C,UAAU,eACVd,EACG,yBAAKc,UAAU,kBAAkBmB,GAEjC,yBAAKnB,UAAU,2BAA2BmB,GAG9C,kBAAC,EAAD,CACInC,WAAYA,EACZC,aAAcA,EACdC,cAAeA,EACfC,QAASA,IAGb,yBAAKa,UAAU,wBACI,IAAda,EACG,oCACI,4BAAQb,UAAU,aAAaiD,QAvEpC,WACf,IAAMC,GAAgB,IAAIjB,MAAOC,UACjChB,EAASgC,EAA+B,IAAfjE,GACzB6B,GAAcD,KAqEU,uBAAGb,UAAU,uBAAuBT,MAAM,KAAKF,OAAO,QAE1D,4BAAQW,UAAU,kBAAkBiD,QApE9C,WACMjC,EAAhB9B,EAAgCF,EAA8BG,KAqEtC,yBACIgE,MAAM,6BACN5D,MAAM,KACNF,OAAO,KACP+D,KAAK,eACLpD,UAAU,kBACVqD,QAAQ,aAER,0BAAMC,EAAE,2GAKpB,oCACI,4BAAQtD,UAAU,aAAaiD,QAAS,kBAAMnC,GAAcD,KACxD,uBAAGb,UAAU,mBAAmBT,MAAM,KAAKF,OAAO,UAKjEe,EAAiB,kBAAC,EAAD,CAAOA,eAAgBA,IAAqB,sCAElE,6BACI,2BAAOH,GAAG,cACN,4BACIsD,IAAI,gEACJC,KAAK,gBAGb,2BAAOvD,GAAG,kBACN,4BACIsD,IAAI,gEACJC,KAAK,mBCpKdC,MARf,WACI,OACI,yBAAKzD,UAAU,YACX,kBAAC,EAAD,QCKG0D,G,MAVA,WACX,OACI,oCACI,yBAAK1D,UAAU,UACX,8CCSD2D,MAXf,WACI,OACI,yBAAK3D,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBACX,kBAAC,EAAD,SCLhB4D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,W","file":"static/js/main.e69244d7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./ProgressBar.css\";\r\n\r\nfunction ProgressBar({ initialSec, secRemaining, pomodoroTimer, restSec }) {\r\n    const [progressionStyle, setProgressionStyle] = useState({\r\n        height: \"5px\",\r\n        borderRadius: \"10px\",\r\n        width: \"0px\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        progression();\r\n        // eslint-disable-next-line\r\n    }, [secRemaining]);\r\n\r\n    const progression = () => {\r\n        let percentProgress;\r\n        if (pomodoroTimer) {\r\n            percentProgress = (initialSec - secRemaining) / initialSec;\r\n        } else {\r\n            percentProgress = (restSec - secRemaining) / restSec;\r\n        }\r\n        const proessionByPx = Math.floor(percentProgress * 300, 1);\r\n        setProgressionStyle({ width: `${proessionByPx}px` });\r\n    };\r\n\r\n    return (\r\n        <div className=\"progress-bar\">\r\n            <div className=\"bar\">\r\n                <div id=\"progression\" style={progressionStyle}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Award.css\";\r\n\r\nfunction Award({ completedCount }) {\r\n    const [stars, setStars] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getStars();\r\n        // eslint-disable-next-line\r\n    }, [completedCount]);\r\n\r\n    const getStars = () => {\r\n        let tempStars = [];\r\n        for (let i = 0; i < completedCount; i++) {\r\n            tempStars.push(<i key={i} className=\"bi bi-star-fill starr\"></i>);\r\n        }\r\n        setStars(tempStars);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"awards\">\r\n                <i className=\"bi bi-award-fill awardd\"></i>\r\n                <div className=\"star-block\">{stars}</div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Award;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport Award from \"./Award\";\r\nimport \"./TimerBlock.css\";\r\n\r\nfunction TimerBlock() {\r\n    // if counter is counting mode\r\n    const [playState, setPlayState] = useState(false);\r\n    // if counting pomodoro, then true, if counting rest then false\r\n    const [pomodoroTimer, setPomodoroTimer] = useState(true);\r\n    // default starting time 25:00 min\r\n    const [initialSec] = useState(1500);\r\n    // rest time 5:00 min\r\n    const [restSec] = useState(300);\r\n    // keeps track of number of seconds remaining in timer\r\n    const [secRemaining, setSecRemaining] = useState(0);\r\n    // used to help calculate time remaining in milliseconds\r\n    const [endMS, setEndMS] = useState(0);\r\n    // formatted display time\r\n    const [formatted, setFormatted] = useState(\"\");\r\n    // ID for setInterval. use this ID to clearInterval\r\n    const [intervalId, setIntervalId] = useState(null);\r\n    // count total number of completed pomodoro rounds\r\n    const [completedCount, setCompletedCount] = useState(0);\r\n\r\n    // loads initial timer value and completed count from localstorage if there.\r\n    useEffect(() => {\r\n        setSecRemaining(initialSec);\r\n        if (window.localStorage.getItem(\"pomodoro_award\") !== null) {\r\n            const grabCountFromLocalStorage = parseInt(window.localStorage.getItem(\"pomodoro_award\"));\r\n            setCompletedCount(grabCountFromLocalStorage);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    // updates the timer in the display.\r\n    useEffect(() => {\r\n        formatTime();\r\n        toggleTimer();\r\n        // eslint-disable-next-line\r\n    }, [secRemaining]);\r\n\r\n    // checks to see if play or pause has been pressed\r\n    useEffect(() => {\r\n        if (playState) {\r\n            const id = window.setInterval(() => {\r\n                const secondsRemaining = (endMS - new Date().getTime()) / 1000;\r\n                setSecRemaining(secondsRemaining);\r\n                setIntervalId(id);\r\n            }, 250);\r\n        } else if (!playState) {\r\n            window.clearInterval(intervalId);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [playState]);\r\n\r\n    // update localstorage if count increases.\r\n    useEffect(() => {\r\n        window.localStorage.setItem(\"pomodoro_award\", completedCount);\r\n    }, [completedCount]);\r\n\r\n    const formatTime = () => {\r\n        let min = parseInt(secRemaining / 60, 10);\r\n        let sec = parseInt(secRemaining % 60, 10);\r\n        min = min < 10 ? `0${min}` : min;\r\n        sec = sec < 10 ? `0${sec}` : sec;\r\n        setFormatted(`${min}:${sec}`);\r\n    };\r\n\r\n    const playButton = () => {\r\n        const currentTimeMS = new Date().getTime();\r\n        setEndMS(currentTimeMS + secRemaining * 1000);\r\n        setPlayState(!playState);\r\n    };\r\n\r\n    const reset = () => {\r\n        pomodoroTimer ? setSecRemaining(initialSec) : setSecRemaining(restSec);\r\n    };\r\n\r\n    // this function does the following:\r\n    // 1. checks when timer is < 0. checks if pomodoro timer or rest timer is running\r\n    // 2. clearInterval\r\n    // 3. Adds award to completion of pomodoro timer\r\n    // 4. changes playstate to false\r\n    // 5. resets timer to opposite timer\r\n    // 6. triggers sound effect for completion.\r\n    const toggleTimer = () => {\r\n        if (secRemaining < 0 && pomodoroTimer) {\r\n            window.clearInterval(intervalId);\r\n            setCompletedCount(completedCount + 1);\r\n            setPlayState(false);\r\n            setPomodoroTimer(false);\r\n            setSecRemaining(restSec);\r\n            pomodoroSound();\r\n        } else if (secRemaining < 0 && !pomodoroTimer) {\r\n            window.clearInterval(intervalId);\r\n            setPlayState(false);\r\n            setPomodoroTimer(true);\r\n            setSecRemaining(initialSec);\r\n            restSound();\r\n        }\r\n    };\r\n\r\n    // sound triggers when pomodoro timer reaches zero\r\n    const pomodoroSound = () => {\r\n        document\r\n            .getElementById(\"pomodoro-sound\")\r\n            .play()\r\n            .then()\r\n            .catch((error) => console.log(error));\r\n    };\r\n\r\n    // sound triggers when rest timer reaches zero\r\n    const restSound = () => {\r\n        document\r\n            .getElementById(\"rest-sound\")\r\n            .play()\r\n            .then()\r\n            .catch((error) => console.log(error));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"timer-block\">\r\n                {pomodoroTimer ? (\r\n                    <div className=\"remaining-time\">{formatted}</div>\r\n                ) : (\r\n                    <div className=\"remaining-time restblue\">{formatted}</div>\r\n                )}\r\n\r\n                <ProgressBar\r\n                    initialSec={initialSec}\r\n                    secRemaining={secRemaining}\r\n                    pomodoroTimer={pomodoroTimer}\r\n                    restSec={restSec}\r\n                />\r\n                {/* buttons */}\r\n                <div className=\"play-pause__buttons\">\r\n                    {playState === false ? (\r\n                        <>\r\n                            <button className=\"play-pause\" onClick={playButton}>\r\n                                <i className=\"bi bi-play-fill play\" width=\"32\" height=\"32\"></i>\r\n                            </button>\r\n                            <button className=\"play-pause stop\" onClick={reset}>\r\n                                {/* stop/reset button */}\r\n                                <svg\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"44\"\r\n                                    height=\"44\"\r\n                                    fill=\"currentColor\"\r\n                                    className=\"bi bi-stop-fill\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                >\r\n                                    <path d=\"M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z\" />\r\n                                </svg>\r\n                            </button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <button className=\"play-pause\" onClick={() => setPlayState(!playState)}>\r\n                                <i className=\"bi bi-pause-fill\" width=\"32\" height=\"32\"></i>\r\n                            </button>\r\n                        </>\r\n                    )}\r\n                </div>\r\n                {completedCount ? <Award completedCount={completedCount} /> : <></>}\r\n            </div>\r\n            <div>\r\n                <audio id=\"rest-sound\">\r\n                    <source\r\n                        src=\"https://freesound.org/data/previews/267/267337_3112522-lq.mp3\"\r\n                        type=\"audio/mpeg\"\r\n                    ></source>\r\n                </audio>\r\n                <audio id=\"pomodoro-sound\">\r\n                    <source\r\n                        src=\"https://freesound.org/data/previews/527/527650_7724198-lq.mp3\"\r\n                        type=\"audio/mpeg\"\r\n                    ></source>\r\n                </audio>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TimerBlock;\r\n","import React from \"react\";\r\nimport \"./MainBody.css\";\r\n\r\nimport TimerBlock from \"./TimerBlock\";\r\n\r\nfunction MainBody() {\r\n    return (\r\n        <div className=\"mainbody\">\r\n            <TimerBlock />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainBody;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n            <div className=\"footer\">\r\n                <p>Kenny Hsieh</p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainBody from \"./Components/MainBody\";\nimport Footer from \"./Components/Footer\";\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <MainBody />\n            <div className=\"footer-wrapper\">\n                <Footer />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}